Main v. 1.0 Committed 2025-02-17
Changes-

Edit Preferences Frame:
- Tkinter frame for user to configure features of program, including visual appearance
    - Font type, size, and window background color ("dark mode") can be adjusted
    - The program function when selected files are non-sequential can also be adjusted
    - There is an option to revert selections to previous values if necessary

Label Button:
- Extension of ttk.Label to allow for a "dark mode"-style button

General/Main:
- Initializes preferences dictionary and ttk styles
    - If preferences files is not found, asks user to manually select file, or the default values are loaded
- Draws Main Frame

Main Frame:
- If pypdf is not installed, attempts to install pypdf using pip
    - This is a one-time installation on the first run of the program
- Includes three methods for adding files to the list
    - Typing of complete pathname of file (one at a time)
    - Selecting files via Tkinter's filedialog (one or more at a time)
    - Loading a text file with a list of full path names (one or more at a time)
        - Loading a text file is only available if no other files have been selected
        - Files that no longer exist can be reselected if desired
- Scrollable frame lists file names and index positions
- Check buttons are included to select files whose positions in the list need to be adjusted
    - A check button at the top can be used to select/deselect all files simultaneously
- Four movement buttons to the right of the scroll frame adjust the locations of the selected files
    - "Double arrows" move files to the top or bottom of the list
    - "Single arrows" move files up or down one position
    - The way the program treats non-sequentially-selected files depends on the preference setting
- A trash can icon below the movement buttons allows the selected files to be removed from the list
- A label at the bottom of the scrollable frame shows the total number of files selected and their size
- A checkbutton beneath the file count label can be used to add blank pages between each output file
- General application buttons are at the bottom of the frame
    - The "Clear" button will remove all files from the list
    - The "Save" button will save the current file list to a text file for later use
    - The "Merge" button generates a PdfWriter object to write the output file
    - The "Preferences" button launches the EditPreferencesFrame to adjust program functionality and appearance options
- Output is done by a PdfWriter object from the pypdf class
    - The user will be prompted if any duplicate files should be removed before the PdfWriter object is generated
    - If duplicate files will be deleted, only the first instance will remain in the list
    - The user will be prompted to select the save location for the file
- The merging process window includes several items to track progress
    - A "Merging files" label will appear while the merger is being created
    - When the files are being written, the size written, percent completion, and estimated time remaining will be shown
- When closing the application, the user will be prompted to save the current files list if they have not been written
    - A warning will appear if the files are actively being written, as premature termination will corrupt the output

Scrollable Frame:
- A configurable, scrollable frame

**************************

Main v. 1.1 Committed 2025-02-24
Changes-

Edit Preferences:
- Added "Add Shortcut" button to enable a shortcut reprompt on program start

General/Main:
- Clarified text for missing preference file selections
- Changed dictionary storage to picked form to support shortcut additions
    - Includes method to "upgrade" text file preferences
- Asks user for creation of desktop / Start menu / custom shortcuts on first launch
    - Checks for existence of desktop / Start menu shortcuts and prompts for recreation if necessary
    - Prompt can be "reset" using a button in the Edit Preferences window

Main Frame:
- Added exception handling for PermissionError when determining size of blank page
    - Also added 1-second delay before os.remove()
    - Will show warning message if file could not be deleted
- Changed preferences save method to pickle

**************************

Main v. 1.2 Committed 2025-03-11
Changes-

General/Main:
- Fixed possible error caused by user not selecting folder for custom shortcut
- Reimplemented shortcut addition function to only use built-in Python functions (win32com.client)

Main Frame:
- Added file selection filters to get_path_name and add_files (multiple)
- Added tooltips for Add Multiple, Select All, Movement, and Clear buttons
- Replaced right-click window with tooltip to show full pathname of file
    - Also includes "hint" to right-click to select page numbers
- Fixed possible issue of invalid character being inserted somewhere other than the end of the input string
- Fixed "file not found" message if <Enter> is pressed with Preferences window open
    - Checks whether Main Frame is in focus
- Implemented new Page Selection feature
    - Added selected_pages dictionary to store information about user selections; see Page Selection
    - When merging files, checks selected pages for out of order or duplicate pages based on user selections
    - Files with not all pages selected are added to the merger one page at a time rather than as a single file
    - Output file size for non-complete files is estimated based on percentage of total pages being "printed"
    - Files cannot be merged if Page Selection window is open (to ensure all changes saved)
    - Page Selection details are included in text file used for saving/loading file list

Page Selection [NEW]:
- A popup window for the user to select which page numbers should be combined
    - Shows the file/folder name and the maximum page number
    - Text is input via an entry box, which defaults to the full page range
    - User can select whether pages that are out-of-order should be put back in order; enabled by default
    - User can select whether duplicate pages are removed; enabled by default
    - Empty input strings default to the full page range
- The window will check for feasible page selection strings before exiting
    - This includes showing a warning if pages outside the available range of pages were automatically removed
- Details for this window are stored in the selected_pages dictionary in Main Frame

Tooltip [NEW]:
- Class that extends OnHoverTooltipBase abstract class from the idlelib.tooltip library
- Shows a tooltip with the specified text after the specified delay has elapsed
    - The maximum tooltip width can be set; it defaults to the maximum available width
    - If the tooltip exceeds the max width, the line delimiters are the newline, space, and backslash (/)
- The tooltip position is determined so that it is fully contained in the main window (horizontally)
    - To also constrain the tooltip height may risk some of the tooltip text being cut off; this shouldn't be an issue

**************************

Main v. 1.3 Committed 2025-04-13
Changes-

Edit Preferences Frame:
- Changed text entry validation procedure to use "new method" (check input string rather than key pressed)
- Slightly adjusted position formatting for Combine Non-Sequential Files radiobutton
- Added toggle for using PdfWriter compress_identical_objects when writing output
- "Add Shortcuts" button only appears on Windows machines

General/Main:
- Put win32com.client import statement in try-except like pypdf import
    - Installation is not attempted if the system is not Windows (the add shortcut flag is set to False)
    - Code is in add_shortcuts, so will only run when necessary
    - Requires a restart for the import to be successful; this should be completed automatically (1.2.1 2025-03-19)
    - Also allows user to continue without package with warning that shortcuts cannot be created (1.2.2 2025-03-19)
    - If package cannot be installed, sets shortcut addition flag in dictionary to False to avoid re-prompting
- Improved flow of preference dictionary setup when Preferences.pkl is unavailable
    - User can select a different file (e.g., from prior version of program)
        - Program checks if unpickled object is a dictionary to reduce the chance of an incorrect file being selected
    - If no previous file exists, user can choose the default preferences or use the Edit Preferences frame to adjust
    - A warning is shown if dictionary keys were adjusted
        - This can happen if a version change adds new configuration features
        - It can also happen if an incorrect file was selected as the preferences file

Main Frame:
- Changed blank page size check to "write" to a BytesIO object to avoid potential issues deleting the test file
- Implemented PdfWriter compress_identical_objects
    - User can disable compression in the Preferences window
    - "Completion" window is updated with file size saved due to compression if needed
- Corrected time remaining calculation so "Finishing up" is not shown sooner than expected
- A file to be merged can now also be selected as the save file
    - The file is temporarily stored in a BytesIO object which may impact performance

Page Selection:
- Now checks for no ",," in page selection input string when attempting to exit

**************************

Main v. 1.4 Committed 2025-07-12
Changes-

Edit Preferences Frame:
- Added toggle for whether file dialog should be launched to script location
    - If not launched to script location, will launch to whatever is file dialog's default location

Main:
- Added boolean for whether file dialog should be launched to script location to default preferences dictionary

Main Frame:
- Added conditional to merger status label updating to ensure label is not "deleted" after merging is complete
- Only one "Page Selection" window can be open at a time
    - If a window is already open, a message is shown and the window is lifted to the top of the stack
- Fixed output file size calculation when a subset of pages is selected
- File dialog now opens to script location or previous location depending on user preference
- If no output file is selected, user can elect to return to file selection process (rather than being forced to exit)
- Added a "unique ID" (integer) to the file_info list of tuples
- Changed selected_pages dictionary to be keyed using the unique ID rather than file path
    - This allows different page ranges to be selected for duplicate files
- Commented out text confirming user does not want to retry selecting a file in get_path_name
- Changed duplicate file resolution to use the new return_to_files method (1.4.1 2025-07-15)
- Fixed "Calculating" being shown instead of "Finishing up" for time remaining label when writing (1.4.1 2025-07-15)

Page Selection:
- Added docstrings to methods
- Updated for changes to selected_pages dictionary structure